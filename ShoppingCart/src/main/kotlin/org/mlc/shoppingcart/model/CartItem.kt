package org.mlc.shoppingcart.model

import jakarta.persistence.*
import java.math.BigDecimal
import java.math.RoundingMode // Required for setScale in updateTotalPrice()

/**
 * Represents an item within a shopping cart.
 * This entity stores details about a product, its quantity, and calculated prices within a specific cart.
 */
@Entity
@Table(name = "cart_items")
data class CartItem(

    /**
     * The unique identifier for the cart item.
     * It's auto-generated by the database upon persistence.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Long = 0L, // Default value 0L for new entities before DB generates ID

    /**
     * The product associated with this cart item.
     * This is a many-to-one relationship, meaning multiple cart items can refer to the same product.
     */
    @ManyToOne
    @JoinColumn(name = "product_id", nullable = false) // Links to the product table; product is mandatory
    val product: Product,

    /**
     * The quantity of the product in this cart item.
     */
    @Column(nullable = false) // Quantity is mandatory
    var quantity: Int,

    /**
     * The unit price of the product at the time it was added to the cart.
     * Stored with 10 digits of precision and 2 decimal places for accurate financial calculations.
     */
    @Column(name = "unit_price", precision = 10, scale = 2, nullable = false) // Unit price is mandatory
    var unitPrice: BigDecimal,

    /**
     * The total price for this cart item (unitPrice * quantity).
     * Stored with 10 digits of precision and 2 decimal places. This value is recalculated
     * when quantity or unitPrice changes.
     */
    @Column(name = "total_price", precision = 10, scale = 2, nullable = false) // Total price is mandatory
    var totalPrice: BigDecimal = BigDecimal.ZERO, // Default to zero, will be calculated later

    /**
     * The shopping cart to which this item belongs.
     * This is a many-to-one relationship, linking the item back to its parent cart.
     */
    @ManyToOne
    @JoinColumn(name = "cart_id", nullable = false) // Links to the cart table; cart is mandatory
    val cart: Cart
)

/**
 * Extension function for [CartItem] to update its [totalPrice].
 * This recalculates the total price based on the current [unitPrice] and [quantity]
 * and applies rounding to ensure exactly two decimal places, which is crucial for financial accuracy.
 */
fun CartItem.updateTotalPrice() {
    totalPrice = unitPrice.multiply(BigDecimal(quantity)).setScale(2, RoundingMode.HALF_UP)
}