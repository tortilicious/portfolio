package org.mlc.shoppingcart.model

import jakarta.persistence.CascadeType
import jakarta.persistence.Column
import jakarta.persistence.Entity
import jakarta.persistence.GeneratedValue
import jakarta.persistence.GenerationType
import jakarta.persistence.Id
import jakarta.persistence.OneToMany
import java.math.BigDecimal
import java.math.RoundingMode

/**
 * Represents a shopping cart in the e-commerce system.
 * A cart holds a collection of [CartItem]s and maintains a calculated total amount.
 */
@Entity
data class Cart(
    /**
     * The unique identifier for the shopping cart.
     * It's auto-generated by the database upon creation.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    val id: Long = 0L, // Default value 0L for new entities before DB generates ID

    /**
     * The total monetary amount of all items currently in the cart.
     * This field is calculated and updated whenever cart items are added, removed, or quantities change.
     * Stored with 10 digits of precision and 2 decimal places for accurate financial calculations.
     */
    @Column(name = "total_amount", precision = 10, scale = 2)
    var totalAmount: BigDecimal = BigDecimal.ZERO, // Initialized to zero

    /**
     * A mutable set of [CartItem]s belonging to this cart.
     * This is a one-to-many relationship, meaning one cart can have multiple items.
     * [CascadeType.ALL] ensures that operations like saving or deleting a cart
     * will also affect its associated items. [orphanRemoval = true] ensures that
     * if a CartItem is removed from this set, it's also deleted from the database.
     */
    @OneToMany(mappedBy = "cart", cascade = [CascadeType.ALL], orphanRemoval = true)
    var cartItems: MutableSet<CartItem> = mutableSetOf(), // 'var' is used for Hibernate's proxy management
)

/**
 * Extension function for [Cart] to update its [totalAmount].
 * This recalculates the sum of all [CartItem.totalPrice]s within the cart
 * and applies rounding to ensure exactly two decimal places, essential for financial accuracy.
 * This function should be called whenever the contents of the cart (items, quantities) change.
 */
fun Cart.updateOverallTotalAmount() {
    totalAmount = cartItems.sumOf { it.totalPrice }
        .setScale(2, RoundingMode.HALF_UP) // Ensures the total has exactly two decimal places
}